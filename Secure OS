# secure_file_manager.py
import hashlib
import smtplib
import random
import os
from datetime import datetime
from cryptography.fernet import Fernet
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, filedialog
import re

# ====================== AUTHENTICATION MODULE ======================
class AuthenticationSystem:
    def __init__(self):
        self.users = {
            "admin": {
                "password": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",  # SHA-256 of "password"
                "email": "admin@example.com",
                "role": "admin"
            }
        }
        self.log_file = "security_log.txt"

    def hash_password(self, password):
        return hashlib.sha256(password.encode()).hexdigest()

    def generate_otp(self):
        return random.randint(100000, 999999)

    def send_otp(self, email):
        otp = self.generate_otp()
        try:
            # Configure your SMTP settings here
            print(f"[DEBUG] OTP for {email}: {otp} (Configure SMTP in production)")
            return otp
        except Exception as e:
            messagebox.showerror("Error", f"Email failed: {str(e)}")
            return None

    def authenticate(self, username, password, otp=None):
        if username not in self.users:
            return False, "User not found"
        
        if self.hash_password(password) != self.users[username]["password"]:
            return False, "Invalid password"
        
        if otp is None:
            otp = self.send_otp(self.users[username]["email"])
            return True, "OTP_SENT"
        
        # Demo bypass - replace with actual OTP verification
        if otp == 123456:
            self.log_event(username, "LOGIN_SUCCESS")
            return True, "LOGIN_SUCCESS"
        else:
            self.log_event(username, "OTP_FAILURE")
            return False, "Invalid OTP"

    def log_event(self, username, event_type):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file, "a") as f:
            f.write(f"{timestamp} | {username} | {event_type}\n")

# ====================== ENCRYPTION MODULE ======================
class FileEncryptor:
    def __init__(self):
        self.key = self.load_or_generate_key()
        self.key_file = "secret.key"

    def load_or_generate_key(self):
        if os.path.exists(self.key_file):
            with open(self.key_file, "rb") as key_file:
                return key_file.read()
        else:
            key = Fernet.generate_key()
            with open(self.key_file, "wb") as key_file:
                key_file.write(key)
            return key

    def encrypt_file(self, filepath):
        fernet = Fernet(self.key)
        with open(filepath, "rb") as f:
            original = f.read()
        encrypted = fernet.encrypt(original)
        with open(f"{filepath}.enc", "wb") as f:
            f.write(encrypted)
        os.remove(filepath)
        return True

    def decrypt_file(self, filepath):
        fernet = Fernet(self.key)
        with open(filepath, "rb") as f:
            encrypted = f.read()
        decrypted = fernet.decrypt(encrypted)
        original_path = filepath.replace(".enc", "")
        with open(original_path, "wb") as f:
            f.write(decrypted)
        os.remove(filepath)
        return True

# ====================== THREAT DETECTION MODULE ======================
class ThreatScanner:
    def __init__(self):
        self.malware_signatures = [
            r"eval\(base64_decode\(",
            r"<script>malicious_code",
            r"rm -rf",
            r"DROP TABLE"
        ]

    def scan_file(self, filepath):
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                content = f.read()
                for pattern in self.malware_signatures:
                    if re.search(pattern, content, re.IGNORECASE):
                        return False, f"Malware detected: {pattern}"
            return True, "File is clean"
        except UnicodeDecodeError:
            return False, "Suspicious binary file"

    def check_buffer_overflow(self, input_data, max_size=1024):
        if len(input_data) > max_size:
            return False, f"Input exceeds {max_size} bytes"
        return True, "Input validated"

# ====================== MAIN APPLICATION ======================
class SecureFileManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Secure OS File Manager")
        self.auth = AuthenticationSystem()
        self.encryptor = FileEncryptor()
        self.scanner = ThreatScanner()
        self.current_user = None
        self.setup_login_ui()

    def setup_login_ui(self):
        self.clear_window()
        
        self.login_frame = ttk.Frame(self.root, padding="20")
        self.login_frame.pack()
        
        ttk.Label(self.login_frame, text="Username:").grid(row=0, column=0, pady=5)
        self.username_entry = ttk.Entry(self.login_frame)
        self.username_entry.grid(row=0, column=1, pady=5)
        
        ttk.Label(self.login_frame, text="Password:").grid(row=1, column=0, pady=5)
        self.password_entry = ttk.Entry(self.login_frame, show="*")
        self.password_entry.grid(row=1, column=1, pady=5)
        
        ttk.Button(self.login_frame, text="Login", command=self.handle_login).grid(row=2, columnspan=2, pady=10)

    def handle_login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        
        success, msg = self.auth.authenticate(username, password)
        if success and msg == "OTP_SENT":
            otp = simpledialog.askinteger("2FA Verification", "Enter OTP sent to your email:")
            if otp:
                success, msg = self.auth.authenticate(username, password, otp)
        
        if success:
            self.current_user = username
            self.show_dashboard()
        else:
            messagebox.showerror("Login Failed", msg)

    def show_dashboard(self):
        self.clear_window()
        
        # Menu Bar
        menu = tk.Menu(self.root)
        self.root.config(menu=menu)
        
        file_menu = tk.Menu(menu, tearoff=0)
        menu.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Encrypt File", command=self.encrypt_file_dialog)
        file_menu.add_command(label="Decrypt File", command=self.decrypt_file_dialog)
        file_menu.add_separator()
        file_menu.add_command(label="Logout", command=self.setup_login_ui)
        
        # Status Bar
        self.status = ttk.Label(self.root, text=f"Logged in as: {self.current_user}", relief=tk.SUNKEN)
        self.status.pack(fill=tk.X, side=tk.BOTTOM, ipady=2)
        
        # Main Content
        ttk.Label(self.root, text="Secure File Operations", font=('Helvetica', 14)).pack(pady=10)
        
        scan_frame = ttk.LabelFrame(self.root, text="Threat Scan", padding="10")
        scan_frame.p
